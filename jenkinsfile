pipeline {
    agent any 
    tools { 
        maven "maven11"
        jdk "openjdk17"
    }
    environment {
        SCANNER_HOME = tool "sonar-scanner"
    } 
    
    stages {
        stage("Github-Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/faisaliqbal-dev/BoardGame-App.git'
            }
        }

        stage("Install-Application") {
            steps {
                sh "mvn compile"
            }
        }

        stage("Test-Application") {
            steps {
                sh "mvn test"
            }
        }

        stage("Trivy-File-scan") {
            steps {
                sh "trivy fs /root/.jenkins/workspace/CICD-Pipeline --format table -o trivy-file-scan.txt"
            }
        }

        stage("Sonarqube-Scan") {
            steps { 
                withSonarQubeEnv('sonarqube-server') {
                    sh '''
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.ProjectKey=BoardGame-App \
                        -Dsonar.ProjectName=BoardGame-App \
                        -Dsonar.java.binaries=target/classes
                    '''
                }
            }
        }

        stage("Build-Application") {
            steps {
                sh "mvn clean package"
            }
        }

        stage("Build & Push Image") {
            steps {
                script {
                    withDockerRegistry(credentialsId: '1b675bc8-602f-417a-8144-39684aa6f053', toolName: 'docker') {
                        sh "docker build -t mohammedfaisaliqbal/boardgame-app:latest ."
                        sh "docker push mohammedfaisaliqbal/boardgame-app:latest"
                    }
                }
            }
        }

        stage("Kubernetes-Deployment") {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '', 
                    credentialsId: 'k8s-credentials', 
                    namespace: 'webapps', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://172.31.41.25:6443'
                ) {
                    sh "kubectl apply -f Deployment.yaml"
                    sh "kubectl apply -f Service.yaml"
                }
            }
        }

        stage("Verify-Deployment") {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '', 
                    credentialsId: 'k8s-credentials', 
                    namespace: 'webapps', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://172.31.41.25:6443'
                ) {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get service -n webapps"
                }
            }
        }
    }
}
